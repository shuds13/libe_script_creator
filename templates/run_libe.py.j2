#!/usr/bin/env python
import os
import sys

import numpy as np
from simf import run_app

from libensemble import Ensemble
from libensemble.alloc_funcs.start_only_persistent import only_persistent_gens as alloc_f
from libensemble.executors import MPIExecutor
from libensemble.gen_funcs.{{ gen_module }} import {{ gen_function }} as gen_f
from libensemble.specs import AllocSpecs, ExitCriteria, GenSpecs, LibeSpecs, SimSpecs

if __name__ == "__main__":
    exctr = MPIExecutor()

    sim_app = "{{ sim_app }}"

    if not os.path.isfile(sim_app):
        sys.exit(f"Application not found: {sim_app}")

    exctr.register_app(full_path=sim_app, app_name="{{ app_ref }}")

    num_workers = {{ num_workers }}

    ensemble = Ensemble(nworkers=num_workers, executor=exctr)

    input_file = "{{ input_file }}"

    ensemble.libE_specs = LibeSpecs(
        gen_on_manager=True,
        sim_dirs_make=True,
        sim_dir_copy_files=[input_file],
    )

    ensemble.sim_specs = SimSpecs(
        sim_f=run_{{ app_ref }},
        inputs=["x"],
        outputs=[("f", float)],
        user={"input_filename": input_file, "input_names": ["particles"]},
    )

    ensemble.gen_specs = GenSpecs(
        gen_f=gen_f,
        inputs=[],
        persis_in=["sim_id"],
        outputs=[("x", float, (1,))],
        user={
            "initial_batch_size": num_workers,
            "lb": np.array([1000]),
            "ub": np.array([3000]),
        },
    )

    ensemble.alloc_specs = AllocSpecs(
        alloc_f=alloc_f,
        user={"async_return": False},
    )

    ensemble.exit_criteria = ExitCriteria(sim_max=8)

    ensemble.add_random_streams()
    H, persis_info, flag = ensemble.run()

    if ensemble.is_manager:
        print("First 3:", ensemble.H[['x', 'f']][:3])
        print("Last 3:", ensemble.H[['x', 'f']][-3:])
